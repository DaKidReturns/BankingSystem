/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author rohit
 */
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;

public class AccountPage extends javax.swing.JFrame {

    /**
     * Creates new form AccountPage
     */
    public AccountPage() {
        //balance = 0;0
        //accNumber = 10023;
        String[] loanTabColNames= {
                "No.","Loan Type","Principle" ,"Interest","Years"
        };
        loanTypes = new DefaultComboBoxModel<String>();
        getLoanTypes(loanTypes);
        initTransactionTable();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountNumberLabel = new javax.swing.JLabel();
        accountNumber = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        balanceAmount = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        userControlPane = new javax.swing.JTabbedPane();
        Withdraw = new javax.swing.JPanel();
        enterWithdrawAmountLabel = new javax.swing.JLabel();
        withdrawAmount = new javax.swing.JSpinner();
        withdrawButton = new javax.swing.JButton();
        Deposit = new javax.swing.JPanel();
        enterAmountDeposit = new javax.swing.JLabel();
        depositButton = new javax.swing.JButton();
        depositAmount = new javax.swing.JSpinner();
        Loan = new javax.swing.JPanel();
        loanTypeLabel = new javax.swing.JLabel();
        loanTypeCombo = new javax.swing.JComboBox<>();
        loanAmountLabel = new javax.swing.JLabel();
        yearsLabel = new javax.swing.JLabel();
        intrestLabel = new javax.swing.JLabel();
        requestLoan = new javax.swing.JButton();
        intrestAmount = new javax.swing.JLabel();
        yearsValue = new javax.swing.JLabel();
        loanAmountVerify = new NumberVerifier();
        loanAmountField = new javax.swing.JTextField();
        TransactionsPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TransactionTable = new javax.swing.JTable();
        TransactionTable.setEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Account");

        accountNumberLabel.setText("Account No:");

        accountNumber.setText(String.valueOf(accNumber)
        );

        balanceLabel.setText("Balance:");

        balanceAmount.setText(String.valueOf(balance));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        userControlPane.setName(""); // NOI18N

        enterWithdrawAmountLabel.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 18)); // NOI18N
        enterWithdrawAmountLabel.setText("Enter Amount");

        withdrawAmount.setModel(new SpinnerNumberModel(0.0,0.0,999_999_999.99,1));
        withdrawAmount.setToolTipText("Enter The value you want to withdraw");

        withdrawButton.setText("Withdraw");
        withdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout WithdrawLayout = new javax.swing.GroupLayout(Withdraw);
        Withdraw.setLayout(WithdrawLayout);
        WithdrawLayout.setHorizontalGroup(
            WithdrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WithdrawLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(WithdrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(withdrawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterWithdrawAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(393, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WithdrawLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(withdrawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        WithdrawLayout.setVerticalGroup(
            WithdrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WithdrawLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(enterWithdrawAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(withdrawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(withdrawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        userControlPane.addTab("Withdraw", Withdraw);

        enterAmountDeposit.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 18)); // NOI18N
        enterAmountDeposit.setText("Enter Amount");

        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        depositAmount.setModel(new SpinnerNumberModel(0.0,0.0,999_999_999.99,1));

        javax.swing.GroupLayout DepositLayout = new javax.swing.GroupLayout(Deposit);
        Deposit.setLayout(DepositLayout);
        DepositLayout.setHorizontalGroup(
            DepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DepositLayout.createSequentialGroup()
                .addContainerGap(384, Short.MAX_VALUE)
                .addComponent(depositButton, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
            .addGroup(DepositLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(DepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depositAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterAmountDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DepositLayout.setVerticalGroup(
            DepositLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DepositLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(enterAmountDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(depositAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(depositButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        userControlPane.addTab("Deposit", Deposit);

        loanTypeLabel.setText("Select Loan Type");

        loanTypeCombo.setModel(loanTypes);
        loanTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanTypeComboActionPerformed(evt);
            }
        });

        loanAmountLabel.setText("Select Loan Amount");

        yearsLabel.setText("Years:");

        intrestLabel.setText("Intrest:");

        requestLoan.setText("Request Loan");
        requestLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestLoanActionPerformed(evt);
            }
        });

        loanAmountField.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 18)); // NOI18N
        loanAmountField.setText("0");
        loanAmountField.setInputVerifier(loanAmountVerify);

        javax.swing.GroupLayout LoanLayout = new javax.swing.GroupLayout(Loan);
        Loan.setLayout(LoanLayout);
        LoanLayout.setHorizontalGroup(
            LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoanLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoanLayout.createSequentialGroup()
                        .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loanTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loanTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                        .addGap(108, 108, 108)
                        .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loanAmountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .addComponent(loanAmountField))
                        .addContainerGap(145, Short.MAX_VALUE))
                    .addGroup(LoanLayout.createSequentialGroup()
                        .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(intrestLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(yearsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(yearsValue, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(intrestAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(requestLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))))
        );
        LoanLayout.setVerticalGroup(
            LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loanTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loanAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loanAmountField)
                    .addComponent(loanTypeCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intrestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intrestAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LoanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(requestLoan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yearsValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(yearsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );

        userControlPane.addTab("Loan", Loan);

        TransactionsPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TransactionsPaneFocusGained(evt);
            }
        });

        TransactionTable.setModel(dtm);
        TransactionTable.getTableHeader().setResizingAllowed(false);
        TransactionTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TransactionTable);

        javax.swing.GroupLayout TransactionsPaneLayout = new javax.swing.GroupLayout(TransactionsPane);
        TransactionsPane.setLayout(TransactionsPaneLayout);
        TransactionsPaneLayout.setHorizontalGroup(
            TransactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
        );
        TransactionsPaneLayout.setVerticalGroup(
            TransactionsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        userControlPane.addTab("Transactions", TransactionsPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userControlPane, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accountNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(balanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(accountNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addComponent(balanceAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 375, Short.MAX_VALUE)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accountNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(accountNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(balanceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(balanceAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(74, 74, 74)
                .addComponent(userControlPane, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        Main.accountPage.setVisible(false);
        Main.userPage.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawButtonActionPerformed
        try {
            withdrawAmount.commitEdit();
            double amount = (double)withdrawAmount.getValue();
            System.out.println("Amount printed: "+amount);
            if(amount<=0){
                JOptionPane.showMessageDialog(Main.accountPage,
                        "Enter a value more than 0",
                        "Very small value",
                        JOptionPane.ERROR_MESSAGE);
            }else{
                try {
                    Statement st = Main.conn.createStatement();
                    st.executeUpdate("UPDATE ACCOUNT SET BALANCE = BALANCE - " + amount);
                    st.executeUpdate("INSERT INTO TRANSACTN (ACCOUNTNO,STATUS,AMOUNT) VALUES ( " + this.accNumber + ",'WITHDRAWAL',"+amount+")");
                    JOptionPane.showMessageDialog(Main.accountPage,
                        "Withdrawn Rs." + amount +" ",
                        "Success",
                        JOptionPane.PLAIN_MESSAGE);
                } catch (SQLException ex) {
                    Logger.getLogger(AccountPage.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(Main.accountPage,
                        ex.toString(),
                        "SQL Error",
                        JOptionPane.ERROR_MESSAGE);
                }
                setAccountDetails(String.valueOf(accNumber),userName);
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(withdrawAmount,
            "Enter a Proper value",
            "Error Occured",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_withdrawButtonActionPerformed

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        try {
            depositAmount.commitEdit();
            double amount = (double)depositAmount.getValue();
            System.out.println("Amount printed: "+amount);
            if(amount<=0){
                JOptionPane.showMessageDialog(Main.accountPage,
                        "Enter a value more than 0",
                        "Very small value",
                        JOptionPane.ERROR_MESSAGE);
            }else{
                try {
                    Statement st = Main.conn.createStatement();
                    st.executeUpdate("UPDATE ACCOUNT SET BALANCE = BALANCE + " + amount);
                    st.executeUpdate("INSERT INTO TRANSACTN (ACCOUNTNO,STATUS,AMOUNT) VALUES ( "+ this.accNumber + ",'DEPOSIT',"+amount+")");
                    JOptionPane.showMessageDialog(Main.accountPage,
                        "Deposited Rs." + amount +" ",
                        "Success",
                        JOptionPane.PLAIN_MESSAGE);
                } catch (SQLException ex) {
                    Logger.getLogger(AccountPage.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(Main.accountPage,
                        ex.toString(),
                        "SQL Error",
                        JOptionPane.ERROR_MESSAGE);
                }
                setAccountDetails(String.valueOf(accNumber),userName);
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(withdrawAmount,
            "Enter a Proper value",
            "Error Occured",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_depositButtonActionPerformed

    private void loanTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loanTypeComboActionPerformed
        javax.swing.JComboBox<String> cb = (javax.swing.JComboBox<String>) evt.getSource();
        String loanType = (String)cb.getSelectedItem();
        try {
            Statement st = Main.conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM LOANTYPETAB WHERE LOANNAME = '"+loanType+"'");
            while(rs.next()){
                loanIntrest = rs.getDouble("INTREST");
                loanYears = rs.getInt("NUMYEARS");
            }
            intrestAmount.setText(String.valueOf(loanIntrest));
            yearsValue.setText(String.valueOf(loanYears));
            intrestAmount.repaint();
            yearsValue.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(AccountPage.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(withdrawAmount,
            ex.toString(),
            "Error Occured",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_loanTypeComboActionPerformed

    private void requestLoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestLoanActionPerformed
        // TODO add your handling code here:
        if(loanAmountVerify.verify(loanAmountField)){ // use loan amount verify to verify the content in the amount field
            if(!((String)loanTypeCombo.getSelectedItem()).equals("Select Loan Type")){
                // If default option is not selected
                try {
                        double loanAmount = Double.parseDouble(loanAmountField.getText());
                        Statement st  = Main.conn.createStatement();
                        st.execute("INSERT INTO LOAN (CUSTOMER_ID,AMOUNT,YEARS,INTEREST) VALUES "
                                + "( (SELECT CUSTOMER_ID FROM ACCOUNT WHERE ACCOUNTNO = '"
                                +this.accNumber+"'),"
                                +loanAmount +","
                                +this.loanYears +","
                                +this.loanIntrest +")");
                        JOptionPane.showMessageDialog(Main.accountPage,
                            "Loan Request Sent!!", 
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                    } catch (SQLException ex) {
                           JOptionPane.showMessageDialog(Main.accountPage,
                            ex.toString(), 
                            "SQL Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                // Show error if the default option is sected
                JOptionPane.showMessageDialog(Main.accountPage,
                    "Select A loan type", 
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        
        }else{
            JOptionPane.showMessageDialog(Main.accountPage,
                    "Enter a Proper amount for loan", 
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_requestLoanActionPerformed

    private void TransactionsPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TransactionsPaneFocusGained
        // TODO add your handling code here:
        createTransactionTable();
    }//GEN-LAST:event_TransactionsPaneFocusGained

    public void setAccountDetails(String accNumber,String userName){
        try{
            Statement st = Main.conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM ACCOUNT WHERE Accountno = "+accNumber);
            if(rs.next()){
                this.balance = rs.getInt("BALANCE");
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        this.accNumber = Integer.parseInt(accNumber);
        this.accountNumber.setText(String.valueOf(accNumber));
        this.balanceAmount.setText(String.valueOf(balance));
        this.userName = userName;

        createTransactionTable();
        this.repaint();
        System.out.println(balance+"  "+accNumber);
    }
    private void initTransactionTable(){
            String[] transactionColumns = new String [] {
                "Amount", "Type"
            };
        dtm = new javax.swing.table.DefaultTableModel( new Object[][]{  
        }, transactionColumns);
    }
    
    public void createTransactionTable(){
        initTransactionTable();
        try {
            Statement st = Main.conn.createStatement();
            ResultSet rs = st.executeQuery("Select * from TRANSACTN WHERE ACCOUNTNO = "+this.accNumber+" ORDER BY TRANSID DESC");
            while(rs.next()){
                dtm.addRow(
                        new Object[]{
                            String.valueOf(rs.getDouble("AMOUNT")),
                            rs.getString("STATUS")
                        }   
                );
            }
        } catch (SQLException ex) {
            Logger.getLogger(AccountPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        TransactionTable.setModel(dtm);
        TransactionTable.repaint();
    }
    
    
    private static void getLoanTypes(DefaultComboBoxModel<String> loanTypes){
        loanTypes.addElement("Select Loan Type");
        try {
            Statement st = Main.conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT LOANNAME FROM LOANTYPETAB");
            while(rs.next()){
                loanTypes.addElement(rs.getString("LOANNAME"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(AccountPage.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(Main.accountPage,
                ex.toString(),
                "SQL Error",
                JOptionPane.ERROR_MESSAGE);
        }
    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountPage().setVisible(true);
            }
        });
    }
    
    
    private int balance;
    private int accNumber;
    private double loanIntrest;
    private int loanYears;
    private String userName;
    private DefaultComboBoxModel<String> loanTypes;
    private NumberVerifier loanAmountVerify;
    private javax.swing.table.DefaultTableModel dtm;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Deposit;
    private javax.swing.JPanel Loan;
    private javax.swing.JTable TransactionTable;
    private javax.swing.JPanel TransactionsPane;
    private javax.swing.JPanel Withdraw;
    private javax.swing.JLabel accountNumber;
    private javax.swing.JLabel accountNumberLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel balanceAmount;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JSpinner depositAmount;
    private javax.swing.JButton depositButton;
    private javax.swing.JLabel enterAmountDeposit;
    private javax.swing.JLabel enterWithdrawAmountLabel;
    private javax.swing.JLabel intrestAmount;
    private javax.swing.JLabel intrestLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField loanAmountField;
    private javax.swing.JLabel loanAmountLabel;
    private javax.swing.JComboBox<String> loanTypeCombo;
    private javax.swing.JLabel loanTypeLabel;
    private javax.swing.JButton requestLoan;
    private javax.swing.JTabbedPane userControlPane;
    private javax.swing.JSpinner withdrawAmount;
    private javax.swing.JButton withdrawButton;
    private javax.swing.JLabel yearsLabel;
    private javax.swing.JLabel yearsValue;
    // End of variables declaration//GEN-END:variables

}

class NumberVerifier extends javax.swing.InputVerifier{
    @Override
    public boolean verify(javax.swing.JComponent input){
        JTextField jf = (JTextField) input;
        String text = jf.getText();
        try{
            double val = Double.parseDouble(text);
            if (val <= 0){
                return false;
            }
        }
        catch(NumberFormatException ex){
            return false;
        }
        return true;
        
    }
}
